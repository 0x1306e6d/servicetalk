/*
 * Copyright Â© 2018 Apple Inc. and the ServiceTalk project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.gradle.api.internal.artifacts.dependencies.DefaultExternalModuleDependency

final TEST_FIXTURES_DEPENDENCY_SUFFIX = '-testFixtures'

buildscript {
  if (!repositories) {
    repositories {
      jcenter()
      maven { url "https://plugins.gradle.org/m2/" }
    }
  }

  dependencies {
    classpath "io.servicetalk:servicetalk-gradle-plugin-internal:0.1.0-SNAPSHOT"
  }
}

project.configure(project) {
  io.servicetalk.gradle.plugin.internal.ServiceTalkLibraryPlugin.applyIdeaPlugin(gradle.rootProject)
  io.servicetalk.gradle.plugin.internal.ServiceTalkLibraryPlugin.applyEclipsePlugin(gradle.rootProject)
  io.servicetalk.gradle.plugin.internal.ServiceTalkCorePlugin.applyLicensePlugin(gradle.rootProject)
}

// Add tasks for composite:

task clean {
  dependsOn gradle.includedBuilds*.task(':clean')
}

task javadoc {
  dependsOn gradle.includedBuilds*.task(':javadoc')
}

task 'package' {
  dependsOn gradle.includedBuilds*.task(':package')
}

task test {
  dependsOn gradle.includedBuilds*.task(':test')
}

task check {
  dependsOn gradle.includedBuilds*.task(':check')
}

task build {
  dependsOn gradle.includedBuilds*.task(':build')
}

// Override behavior for existing tasks:

task publish(overwrite: true) {
  dependsOn gradle.includedBuilds*.task(':publish')
}

task license(overwrite: true) {
  dependsOn licenseRoot
  dependsOn gradle.includedBuilds*.task(':license')
}

task licenseFormat(overwrite: true) {
  dependsOn licenseFormatRoot
  dependsOn gradle.includedBuilds*.task(':licenseFormat')
}
